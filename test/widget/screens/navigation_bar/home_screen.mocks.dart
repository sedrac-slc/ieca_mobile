// Mocks generated by Mockito 5.4.6 from annotations
// in ieca_mobile/test/widget/screens/navigation_bar/home_screen.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i6;

import 'package:ieca_mobile/object_box.dart' as _i4;
import 'package:ieca_mobile/objectbox.g.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:objectbox/src/store.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStore_0 extends _i1.SmartFake implements _i2.Store {
  _FakeStore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBox_1<T1> extends _i1.SmartFake implements _i2.Box<T1> {
  _FakeBox_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_2<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryBuilder_3<T1> extends _i1.SmartFake
    implements _i2.QueryBuilder<T1> {
  _FakeQueryBuilder_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ObjectBox].
///
/// See the documentation for Mockito's code generation for more information.
class MockObjectBox extends _i1.Mock implements _i4.ObjectBox {
  MockObjectBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Store get store =>
      (super.noSuchMethod(
            Invocation.getter(#store),
            returnValue: _FakeStore_0(this, Invocation.getter(#store)),
          )
          as _i2.Store);

  @override
  set store(_i2.Store? _store) => super.noSuchMethod(
    Invocation.setter(#store, _store),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore extends _i1.Mock implements _i2.Store {
  MockStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get directoryPath =>
      (super.noSuchMethod(
            Invocation.getter(#directoryPath),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#directoryPath),
            ),
          )
          as String);

  @override
  _i6.ByteData get reference =>
      (super.noSuchMethod(
            Invocation.getter(#reference),
            returnValue: _i6.ByteData(0),
          )
          as _i6.ByteData);

  @override
  bool isClosed() =>
      (super.noSuchMethod(Invocation.method(#isClosed, []), returnValue: false)
          as bool);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Box<T> box<T>() =>
      (super.noSuchMethod(
            Invocation.method(#box, []),
            returnValue: _FakeBox_1<T>(this, Invocation.method(#box, [])),
          )
          as _i2.Box<T>);

  @override
  R runInTransaction<R>(_i2.TxMode? mode, R Function()? fn) =>
      (super.noSuchMethod(
            Invocation.method(#runInTransaction, [mode, fn]),
            returnValue: _i5.dummyValue<R>(
              this,
              Invocation.method(#runInTransaction, [mode, fn]),
            ),
          )
          as R);

  @override
  _i3.Future<R> runInTransactionAsync<R, P>(
    _i2.TxMode? mode,
    _i7.TxAsyncCallback<R, P>? callback,
    P? param,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#runInTransactionAsync, [mode, callback, param]),
            returnValue:
                _i5.ifNotNull(
                  _i5.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#runInTransactionAsync, [
                      mode,
                      callback,
                      param,
                    ]),
                  ),
                  (R v) => _i3.Future<R>.value(v),
                ) ??
                _FakeFuture_2<R>(
                  this,
                  Invocation.method(#runInTransactionAsync, [
                    mode,
                    callback,
                    param,
                  ]),
                ),
          )
          as _i3.Future<R>);

  @override
  _i3.Future<R> runAsync<P, R>(
    _i7.RunAsyncCallback<P, R>? callback,
    P? param,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#runAsync, [callback, param]),
            returnValue:
                _i5.ifNotNull(
                  _i5.dummyValueOrNull<R>(
                    this,
                    Invocation.method(#runAsync, [callback, param]),
                  ),
                  (R v) => _i3.Future<R>.value(v),
                ) ??
                _FakeFuture_2<R>(
                  this,
                  Invocation.method(#runAsync, [callback, param]),
                ),
          )
          as _i3.Future<R>);

  @override
  bool awaitQueueCompletion() =>
      (super.noSuchMethod(
            Invocation.method(#awaitQueueCompletion, []),
            returnValue: false,
          )
          as bool);

  @override
  bool awaitQueueSubmitted() =>
      (super.noSuchMethod(
            Invocation.method(#awaitQueueSubmitted, []),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<T> extends _i1.Mock implements _i2.Box<T> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int put(T? object, {_i2.PutMode? mode = _i2.PutMode.put}) =>
      (super.noSuchMethod(
            Invocation.method(#put, [object], {#mode: mode}),
            returnValue: 0,
          )
          as int);

  @override
  _i3.Future<int> putAsync(T? object, {_i2.PutMode? mode = _i2.PutMode.put}) =>
      (super.noSuchMethod(
            Invocation.method(#putAsync, [object], {#mode: mode}),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<T> putAndGetAsync(
    T? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#putAndGetAsync, [object], {#mode: mode}),
            returnValue:
                _i5.ifNotNull(
                  _i5.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#putAndGetAsync, [object], {#mode: mode}),
                  ),
                  (T v) => _i3.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#putAndGetAsync, [object], {#mode: mode}),
                ),
          )
          as _i3.Future<T>);

  @override
  _i3.Future<int> putQueuedAwaitResult(
    T? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#putQueuedAwaitResult, [object], {#mode: mode}),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  int putQueued(T? object, {_i2.PutMode? mode = _i2.PutMode.put}) =>
      (super.noSuchMethod(
            Invocation.method(#putQueued, [object], {#mode: mode}),
            returnValue: 0,
          )
          as int);

  @override
  List<int> putMany(List<T>? objects, {_i2.PutMode? mode = _i2.PutMode.put}) =>
      (super.noSuchMethod(
            Invocation.method(#putMany, [objects], {#mode: mode}),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  _i3.Future<List<int>> putManyAsync(
    List<T>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#putManyAsync, [objects], {#mode: mode}),
            returnValue: _i3.Future<List<int>>.value(<int>[]),
          )
          as _i3.Future<List<int>>);

  @override
  _i3.Future<List<T>> putAndGetManyAsync(
    List<T>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#putAndGetManyAsync, [objects], {#mode: mode}),
            returnValue: _i3.Future<List<T>>.value(<T>[]),
          )
          as _i3.Future<List<T>>);

  @override
  T? get(int? id) => (super.noSuchMethod(Invocation.method(#get, [id])) as T?);

  @override
  _i3.Future<T?> getAsync(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getAsync, [id]),
            returnValue: _i3.Future<T?>.value(),
          )
          as _i3.Future<T?>);

  @override
  List<T?> getMany(List<int>? ids, {bool? growableResult = false}) =>
      (super.noSuchMethod(
            Invocation.method(
              #getMany,
              [ids],
              {#growableResult: growableResult},
            ),
            returnValue: <T?>[],
          )
          as List<T?>);

  @override
  _i3.Future<List<T?>> getManyAsync(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getManyAsync,
              [ids],
              {#growableResult: growableResult},
            ),
            returnValue: _i3.Future<List<T?>>.value(<T?>[]),
          )
          as _i3.Future<List<T?>>);

  @override
  List<T> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []), returnValue: <T>[])
          as List<T>);

  @override
  _i3.Future<List<T>> getAllAsync() =>
      (super.noSuchMethod(
            Invocation.method(#getAllAsync, []),
            returnValue: _i3.Future<List<T>>.value(<T>[]),
          )
          as _i3.Future<List<T>>);

  @override
  _i2.QueryBuilder<T> query([_i2.Condition<T>? qc]) =>
      (super.noSuchMethod(
            Invocation.method(#query, [qc]),
            returnValue: _FakeQueryBuilder_3<T>(
              this,
              Invocation.method(#query, [qc]),
            ),
          )
          as _i2.QueryBuilder<T>);

  @override
  int count({int? limit = 0}) =>
      (super.noSuchMethod(
            Invocation.method(#count, [], {#limit: limit}),
            returnValue: 0,
          )
          as int);

  @override
  bool isEmpty() =>
      (super.noSuchMethod(Invocation.method(#isEmpty, []), returnValue: false)
          as bool);

  @override
  bool contains(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [id]),
            returnValue: false,
          )
          as bool);

  @override
  bool containsMany(List<int>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#containsMany, [ids]),
            returnValue: false,
          )
          as bool);

  @override
  bool remove(int? id) =>
      (super.noSuchMethod(Invocation.method(#remove, [id]), returnValue: false)
          as bool);

  @override
  _i3.Future<bool> removeAsync(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeAsync, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  int removeMany(List<int>? ids) =>
      (super.noSuchMethod(Invocation.method(#removeMany, [ids]), returnValue: 0)
          as int);

  @override
  _i3.Future<int> removeManyAsync(List<int>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#removeManyAsync, [ids]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  int removeAll() =>
      (super.noSuchMethod(Invocation.method(#removeAll, []), returnValue: 0)
          as int);

  @override
  _i3.Future<int> removeAllAsync() =>
      (super.noSuchMethod(
            Invocation.method(#removeAllAsync, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);
}
